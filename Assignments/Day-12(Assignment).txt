Q-1. What do you mean by an array?
Ans. An array is a collection of similar type of data items stored at contiguous memory locations.
     The idea is to store multiple items of the same type together. This makes it easier to calculate the position of each element by simply adding an offset to a base value, i.e., 
     the memory location of the first element of the array (generally denoted by the name of the array).

Q-2. How to create Array ?
Ans. To create an array in Java, you have to specify the type of elements it will hold, and the number of elements it will hold.
     For example, to create an array that can hold 10 integers, you would write the following code:
          int[] arr = new int[10];

Q-3. Can we change the size of an array at run time?
Ans. No, we can't change the size of an array at run time. The size of an array must be specified when the array is created. After creation, its size is fixed.

Q-4. Can you declare an array without assigning the size of an array?
Ans. No, you can't declare an array without assigning the size of an array. The size of an array must be specified when the array is created. After creation, its size is fixed.

Q-5. What is the default value of array?
Ans. The default value of an array is null.
     The default value of an array element is 0.

Q-6. What is 1D array with an example?
Ans. A one-dimensional array is a collection of similar type of data items stored at contiguous memory locations.
     For example, int[] arr = new int[10]; is a one-dimensional array that can hold 10 integers.

Q-7. Write a program on a 2d array ?
Ans. import java.util.*;

     public class Prac1{
     public static void main(String[] args){
         int[][] arr = new int[10][10];
         for(int i=0; i<10; i++){
             for(int j=0; j<10; j++){
                 arr[i][j] = i*j;
             }
         }
         for(int i=0; i<10; i++){
             for(int j=0; j<10; j++){
                 System.out.print(arr[i][j] + " ");
             }
             System.out.println();
         }
       }
     }